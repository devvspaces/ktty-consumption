/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface KttyWorldCompanionsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "approve"
      | "balanceOf"
      | "baseTokenUri"
      | "batchMint"
      | "batchRevealTokens"
      | "exists"
      | "getApproved"
      | "getTokenCode"
      | "hiddenMetadataUri"
      | "initialize"
      | "isApprovedForAll"
      | "isRevealed"
      | "isTokenRevealed"
      | "maxSupply"
      | "mintAll"
      | "mintingContract"
      | "name"
      | "owner"
      | "ownerOf"
      | "proxiableUUID"
      | "renounceOwnership"
      | "revealToken"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setBaseTokenUri"
      | "setBulkTokenCodes"
      | "setHiddenMetadataUri"
      | "setMintingContract"
      | "setRevealed"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "transferOwnership"
      | "updateName"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "BaseTokenUriUpdated"
      | "BatchMinted"
      | "HiddenMetadataUriUpdated"
      | "Initialized"
      | "MetadataUpdated"
      | "MintingContractUpdated"
      | "NameUpdated"
      | "OwnershipTransferred"
      | "Revealed"
      | "TokenCodesUpdated"
      | "TokenRevealed"
      | "TokensRevealed"
      | "Transfer"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "baseTokenUri",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchMint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchRevealTokens",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenCode",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hiddenMetadataUri",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRevealed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenRevealed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "maxSupply", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintAll",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintingContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revealToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseTokenUri",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBulkTokenCodes",
    values: [BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setHiddenMetadataUri",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintingContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRevealed",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "updateName", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseTokenUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchRevealTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hiddenMetadataUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isRevealed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTokenRevealed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseTokenUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBulkTokenCodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHiddenMetadataUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRevealed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BaseTokenUriUpdatedEvent {
  export type InputTuple = [baseTokenUri: string];
  export type OutputTuple = [baseTokenUri: string];
  export interface OutputObject {
    baseTokenUri: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchMintedEvent {
  export type InputTuple = [
    to: AddressLike,
    startTokenId: BigNumberish,
    quantity: BigNumberish
  ];
  export type OutputTuple = [
    to: string,
    startTokenId: bigint,
    quantity: bigint
  ];
  export interface OutputObject {
    to: string;
    startTokenId: bigint;
    quantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HiddenMetadataUriUpdatedEvent {
  export type InputTuple = [hiddenMetadataUri: string];
  export type OutputTuple = [hiddenMetadataUri: string];
  export interface OutputObject {
    hiddenMetadataUri: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdatedEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintingContractUpdatedEvent {
  export type InputTuple = [newMintingContract: AddressLike];
  export type OutputTuple = [newMintingContract: string];
  export interface OutputObject {
    newMintingContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NameUpdatedEvent {
  export type InputTuple = [newName: string];
  export type OutputTuple = [newName: string];
  export interface OutputObject {
    newName: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevealedEvent {
  export type InputTuple = [revealed: boolean];
  export type OutputTuple = [revealed: boolean];
  export interface OutputObject {
    revealed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenCodesUpdatedEvent {
  export type InputTuple = [tokenIds: BigNumberish[], codes: string[]];
  export type OutputTuple = [tokenIds: bigint[], codes: string[]];
  export interface OutputObject {
    tokenIds: bigint[];
    codes: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenRevealedEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensRevealedEvent {
  export type InputTuple = [tokenIds: BigNumberish[]];
  export type OutputTuple = [tokenIds: bigint[]];
  export interface OutputObject {
    tokenIds: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface KttyWorldCompanions extends BaseContract {
  connect(runner?: ContractRunner | null): KttyWorldCompanions;
  waitForDeployment(): Promise<this>;

  interface: KttyWorldCompanionsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  baseTokenUri: TypedContractMethod<[], [string], "view">;

  batchMint: TypedContractMethod<
    [to: AddressLike, quantity: BigNumberish],
    [void],
    "nonpayable"
  >;

  batchRevealTokens: TypedContractMethod<
    [tokenIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  exists: TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getTokenCode: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  hiddenMetadataUri: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [
      _owner: AddressLike,
      _name: string,
      _symbol: string,
      _hiddenMetadataUri: string,
      _maxSupply: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isRevealed: TypedContractMethod<[], [boolean], "view">;

  isTokenRevealed: TypedContractMethod<
    [tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  maxSupply: TypedContractMethod<[], [bigint], "view">;

  mintAll: TypedContractMethod<
    [to: AddressLike, quantity: BigNumberish],
    [void],
    "nonpayable"
  >;

  mintingContract: TypedContractMethod<[], [string], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revealToken: TypedContractMethod<
    [tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setBaseTokenUri: TypedContractMethod<
    [_baseTokenUri: string],
    [void],
    "nonpayable"
  >;

  setBulkTokenCodes: TypedContractMethod<
    [tokenIds: BigNumberish[], codes: string[]],
    [void],
    "nonpayable"
  >;

  setHiddenMetadataUri: TypedContractMethod<
    [_hiddenMetadataUri: string],
    [void],
    "nonpayable"
  >;

  setMintingContract: TypedContractMethod<
    [_mintingContract: AddressLike],
    [void],
    "nonpayable"
  >;

  setRevealed: TypedContractMethod<[_revealed: boolean], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateName: TypedContractMethod<[_name: string], [void], "nonpayable">;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseTokenUri"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "batchMint"
  ): TypedContractMethod<
    [to: AddressLike, quantity: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchRevealTokens"
  ): TypedContractMethod<[tokenIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "exists"
  ): TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenCode"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "hiddenMetadataUri"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _owner: AddressLike,
      _name: string,
      _symbol: string,
      _hiddenMetadataUri: string,
      _maxSupply: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isRevealed"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isTokenRevealed"
  ): TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintAll"
  ): TypedContractMethod<
    [to: AddressLike, quantity: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintingContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revealToken"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBaseTokenUri"
  ): TypedContractMethod<[_baseTokenUri: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBulkTokenCodes"
  ): TypedContractMethod<
    [tokenIds: BigNumberish[], codes: string[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setHiddenMetadataUri"
  ): TypedContractMethod<[_hiddenMetadataUri: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMintingContract"
  ): TypedContractMethod<[_mintingContract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRevealed"
  ): TypedContractMethod<[_revealed: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateName"
  ): TypedContractMethod<[_name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BaseTokenUriUpdated"
  ): TypedContractEvent<
    BaseTokenUriUpdatedEvent.InputTuple,
    BaseTokenUriUpdatedEvent.OutputTuple,
    BaseTokenUriUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "BatchMinted"
  ): TypedContractEvent<
    BatchMintedEvent.InputTuple,
    BatchMintedEvent.OutputTuple,
    BatchMintedEvent.OutputObject
  >;
  getEvent(
    key: "HiddenMetadataUriUpdated"
  ): TypedContractEvent<
    HiddenMetadataUriUpdatedEvent.InputTuple,
    HiddenMetadataUriUpdatedEvent.OutputTuple,
    HiddenMetadataUriUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MetadataUpdated"
  ): TypedContractEvent<
    MetadataUpdatedEvent.InputTuple,
    MetadataUpdatedEvent.OutputTuple,
    MetadataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MintingContractUpdated"
  ): TypedContractEvent<
    MintingContractUpdatedEvent.InputTuple,
    MintingContractUpdatedEvent.OutputTuple,
    MintingContractUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "NameUpdated"
  ): TypedContractEvent<
    NameUpdatedEvent.InputTuple,
    NameUpdatedEvent.OutputTuple,
    NameUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Revealed"
  ): TypedContractEvent<
    RevealedEvent.InputTuple,
    RevealedEvent.OutputTuple,
    RevealedEvent.OutputObject
  >;
  getEvent(
    key: "TokenCodesUpdated"
  ): TypedContractEvent<
    TokenCodesUpdatedEvent.InputTuple,
    TokenCodesUpdatedEvent.OutputTuple,
    TokenCodesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenRevealed"
  ): TypedContractEvent<
    TokenRevealedEvent.InputTuple,
    TokenRevealedEvent.OutputTuple,
    TokenRevealedEvent.OutputObject
  >;
  getEvent(
    key: "TokensRevealed"
  ): TypedContractEvent<
    TokensRevealedEvent.InputTuple,
    TokensRevealedEvent.OutputTuple,
    TokensRevealedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BaseTokenUriUpdated(string)": TypedContractEvent<
      BaseTokenUriUpdatedEvent.InputTuple,
      BaseTokenUriUpdatedEvent.OutputTuple,
      BaseTokenUriUpdatedEvent.OutputObject
    >;
    BaseTokenUriUpdated: TypedContractEvent<
      BaseTokenUriUpdatedEvent.InputTuple,
      BaseTokenUriUpdatedEvent.OutputTuple,
      BaseTokenUriUpdatedEvent.OutputObject
    >;

    "BatchMinted(address,uint256,uint256)": TypedContractEvent<
      BatchMintedEvent.InputTuple,
      BatchMintedEvent.OutputTuple,
      BatchMintedEvent.OutputObject
    >;
    BatchMinted: TypedContractEvent<
      BatchMintedEvent.InputTuple,
      BatchMintedEvent.OutputTuple,
      BatchMintedEvent.OutputObject
    >;

    "HiddenMetadataUriUpdated(string)": TypedContractEvent<
      HiddenMetadataUriUpdatedEvent.InputTuple,
      HiddenMetadataUriUpdatedEvent.OutputTuple,
      HiddenMetadataUriUpdatedEvent.OutputObject
    >;
    HiddenMetadataUriUpdated: TypedContractEvent<
      HiddenMetadataUriUpdatedEvent.InputTuple,
      HiddenMetadataUriUpdatedEvent.OutputTuple,
      HiddenMetadataUriUpdatedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MetadataUpdated(uint256)": TypedContractEvent<
      MetadataUpdatedEvent.InputTuple,
      MetadataUpdatedEvent.OutputTuple,
      MetadataUpdatedEvent.OutputObject
    >;
    MetadataUpdated: TypedContractEvent<
      MetadataUpdatedEvent.InputTuple,
      MetadataUpdatedEvent.OutputTuple,
      MetadataUpdatedEvent.OutputObject
    >;

    "MintingContractUpdated(address)": TypedContractEvent<
      MintingContractUpdatedEvent.InputTuple,
      MintingContractUpdatedEvent.OutputTuple,
      MintingContractUpdatedEvent.OutputObject
    >;
    MintingContractUpdated: TypedContractEvent<
      MintingContractUpdatedEvent.InputTuple,
      MintingContractUpdatedEvent.OutputTuple,
      MintingContractUpdatedEvent.OutputObject
    >;

    "NameUpdated(string)": TypedContractEvent<
      NameUpdatedEvent.InputTuple,
      NameUpdatedEvent.OutputTuple,
      NameUpdatedEvent.OutputObject
    >;
    NameUpdated: TypedContractEvent<
      NameUpdatedEvent.InputTuple,
      NameUpdatedEvent.OutputTuple,
      NameUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Revealed(bool)": TypedContractEvent<
      RevealedEvent.InputTuple,
      RevealedEvent.OutputTuple,
      RevealedEvent.OutputObject
    >;
    Revealed: TypedContractEvent<
      RevealedEvent.InputTuple,
      RevealedEvent.OutputTuple,
      RevealedEvent.OutputObject
    >;

    "TokenCodesUpdated(uint256[],string[])": TypedContractEvent<
      TokenCodesUpdatedEvent.InputTuple,
      TokenCodesUpdatedEvent.OutputTuple,
      TokenCodesUpdatedEvent.OutputObject
    >;
    TokenCodesUpdated: TypedContractEvent<
      TokenCodesUpdatedEvent.InputTuple,
      TokenCodesUpdatedEvent.OutputTuple,
      TokenCodesUpdatedEvent.OutputObject
    >;

    "TokenRevealed(uint256)": TypedContractEvent<
      TokenRevealedEvent.InputTuple,
      TokenRevealedEvent.OutputTuple,
      TokenRevealedEvent.OutputObject
    >;
    TokenRevealed: TypedContractEvent<
      TokenRevealedEvent.InputTuple,
      TokenRevealedEvent.OutputTuple,
      TokenRevealedEvent.OutputObject
    >;

    "TokensRevealed(uint256[])": TypedContractEvent<
      TokensRevealedEvent.InputTuple,
      TokensRevealedEvent.OutputTuple,
      TokensRevealedEvent.OutputObject
    >;
    TokensRevealed: TypedContractEvent<
      TokensRevealedEvent.InputTuple,
      TokensRevealedEvent.OutputTuple,
      TokensRevealedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
